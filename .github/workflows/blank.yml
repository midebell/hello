# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      sandbox:
        default: true
        type: boolean
      nonprod:
        default: true
        type: boolean
      prod:
        default: true
        type: boolean
      env_list:
        default: 'sandbox,nonprod,prod'
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  dev:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v4
    # - uses: actions/github-script@v7
    #   id: set-result
    #   env:
    #     env_list: ${{ inputs.env_list }}
    #   with:
    #     script: |
    #       const env_list = process.env.env_list.split(',')
    #       const inputList = context.payload.inputs
    #       core.info(`Loaded inputs: ${JSON.stringify(inputList)}`)
    #       const selected = []
    #       for (const env in env_list) {
    #         for (const key in inputList) {
    #           if (env_list[env].includes(key) && inputList[key] === 'true') {
    #             selected.push(key)
    #           }
    #         }
    #       }
    #       let unique = [...new Set(selected)];
    #       core.info(unique) 
    #       core.info(`Selected inputs: ${unique}`)
    #       core.setOutput('selected', unique.join(','))
    # - run: |
    #     echo ${{ steps.set-result.outputs.selected }}
  # core.info(selected)   
  # core.info(env_list) 
  # core.info(env_list[key])
  # const env_list = process.env.env_list.split(',')
  # const inputList = context.payload.inputs
  # core.info(`Loaded inputs: ${JSON.stringify(inputList)}`)
  # const selected = []
  # for (const key in inputList) {
  #   if (env_list.includes(key) && inputList[key] === 'true') {
  #     selected.push(key)
  #   }
  # }

  # core.info(selected)   
  # core.info(env_list) 
    # for (const env of env_list) {
    #   for (const key in inputList) {
    #     if (env.match(/^prod$/) && inputList[key] === 'true') {
    #       selected.push(key)
    #     }
    #   }
    # } 
    - name: Load environment from YAML
      uses: doughepi/yaml-env-action@main
      with:
        files: dev.yml 
    - run: |
        printenv
    # - name: Set ENV values from YAML
    #   uses: dcarbone/yaml-to-env-action@v1.0.0 #works with yml files
    #   with:
    #     yaml-file: dev.yml
          #  core.info(key)
          # for (const key in inputList) {
          #   core.info(key)
          #   selected.push(key)
          # }
    # - name: Print environment variables
    #   run: |
    #     echo ${{ env.SECRET_TOKEN }}
    # - uses: cardinalby/export-env-action@v2 #works
    #   id: exportStep
    #   with:
    #     envFile: '.env.development|.env.test'
    # - run: |
    #     echo ${{ env.HELLO }}
    #     echo ${{ env.DATABASE_NAME }}
    #     echo ${{ env.API_PATH }}
    #   shell: bash

  #   - uses: duskmoon314/action-load-env@v1 #works
  #     id: load-env
  #     with:
  #       files: |
  #         .env.*
  # # do anything you want with the env or outputs
  #   - run: |
  #       echo ${{ steps.load-env.outputs.DATABASE_NAME }}
  #       echo ${{ steps.load-env.outputs.HELLO }}
  #       echo ${{ steps.load-env.outputs."AWS.S3.Enabled" }}
  #     shell: bash

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # - uses: actions/checkout@v4
      # - name: Load development vars
      #   id: set_env_development
      #   # if: |
      #   #   github.ref == 'refs/heads/development'
      #   uses: thgbrb/setup-environment@main #works
      #   with:
      #     environment-config-file: "setup_dev.env"
      #     # section-name: "API_LOREM_IPSUM"
      # - name: hello
      #   run: |
      #     echo ${{ env.AWS_REGION }}
      #     echo ${{ env.API_PATH }}
          # echo ${{ env.DATABASE_NAME }}

# In this example, all key from default section and
# grouped into section named API_LOREM_IPSUM will be loaded to environment variables.
  # qa:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v4
      # # - uses: university-of-york/ds-devtool-setEnvVars@v3
      # #   with:
      # #       envFile: 'staging.env'

      # - name: Set Environment Variables
      #   uses: tw3lveparsecs/github-actions-set-variables@latest
      #   with:
      #     envFilePath: .github/variables/vars.env
      # # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #   run: |
      #     echo "$DATABASE_NAME"
      #     echo ${{ env.DATABASE_NAME }}
      #     echo ${{ vars.DATABASE_NAME }}
      #     echo ${DATABASE_NAME}
      #   env:
      #       DATABASE_NAME: ${{ vars.DATABASE_NAME }}
      #   shell: bash

